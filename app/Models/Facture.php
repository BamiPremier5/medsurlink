<?php

namespace App\Models;

use App\User;
use Carbon\Carbon;
use Cviebrock\EloquentSluggable\Sluggable;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Str;

/**
 * App\Models\Facture
 *
 * @property int $id
 * @property int|null $dossier_medical_id
 * @property int|null $etablissement_id
 * @property int|null $creator
 * @property string|null $total_hors_remise
 * @property string|null $total_avec_remise
 * @property string|null $remise
 * @property string|null $date_facturation
 * @property string|null $statut
 * @property string|null $motif
 * @property \Illuminate\Support\Carbon|null $deleted_at
 * @property string $slug
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property-read User|null $createur
 * @property-read \App\Models\DossierMedical|null $dossier
 * @property-read \App\Models\EtablissementExercice|null $etablissement
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\Models\File[] $files
 * @property-read int|null $files_count
 * @property-read mixed $name_and_timestamp
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\Models\FacturePrestation[] $prestations
 * @property-read int|null $prestations_count
 * @method static \Illuminate\Database\Eloquent\Builder|Facture findSimilarSlugs($attribute, $config, $slug)
 * @method static \Illuminate\Database\Eloquent\Builder|Facture newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Facture newQuery()
 * @method static \Illuminate\Database\Query\Builder|Facture onlyTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|Facture query()
 * @method static \Illuminate\Database\Eloquent\Builder|Facture whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Facture whereCreator($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Facture whereDateFacturation($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Facture whereDeletedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Facture whereDossierMedicalId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Facture whereEtablissementId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Facture whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Facture whereMotif($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Facture whereRemise($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Facture whereSlug($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Facture whereStatut($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Facture whereTotalAvecRemise($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Facture whereTotalHorsRemise($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Facture whereUpdatedAt($value)
 * @method static \Illuminate\Database\Query\Builder|Facture withTrashed()
 * @method static \Illuminate\Database\Query\Builder|Facture withoutTrashed()
 * @mixin \Eloquent
 */
class Facture extends Model
{
    use SoftDeletes;
    use Sluggable;

    protected $fillable = [
        'dossier_medical_id',
        'etablissement_id',
        'creator',
        'total_hors_remise',
        'total_avec_remise',
        'date_facturation',
        'motif',
        'statut',
        'remise',
        'slug',
    ];

    public function sluggable()
    {
        return [
            'slug' => [
                'source' => 'NameAndTimestamp'
            ]
        ];
    }

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        //On définit le créateur à la création du suivi
        Suivi::creating(function ($facture){
            $facture->creator = Auth::id();
        });
    }

    public function getNameAndTimestampAttribute() {
        return Str::random(16).' '.Carbon::now()->timestamp;
    }

    public function dossier(){
        return $this->belongsTo(DossierMedical::class,'dossier_medical_id','id');
    }

    public function createur(){
        return $this->belongsTo(User::class,'creator','id');
    }

    public function files(){
        return $this->morphMany(File::class,'fileable');
    }

    public function etablissement(){
        return $this->belongsTo(EtablissementExercice::class,'etablissement_id','id');
    }

    public function prestations(){
        return $this->hasMany(FacturePrestation::class,'facture_id','id');
    }
}
