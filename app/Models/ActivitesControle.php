<?php

namespace App\Models;

use App\User;
use Carbon\Carbon;
use Illuminate\Support\Str;
use App\Models\LigneDeTemps;
use Illuminate\Support\Facades\Auth;
use Illuminate\Database\Eloquent\Model;
use App\Models\ActivitesMedecinReferent;
use Cviebrock\EloquentSluggable\Sluggable;
use Illuminate\Database\Eloquent\SoftDeletes;

/**
 * App\Models\ActivitesControle
 *
 * @property int $id
 * @property int $patient_id
 * @property int|null $creator
 * @property string|null $statut
 * @property int|null $activite_id
 * @property string|null $commentaire
 * @property string|null $date_cloture
 * @property string $slug
 * @property \Illuminate\Support\Carbon|null $deleted_at
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property int|null $affiliation_id
 * @property int|null $ligne_temps_id
 * @property int|null $etablissement_id
 * @property-read ActivitesMedecinReferent|null $activitesMedecinReferent
 * @property-read \App\Models\Affiliation|null $affiliation
 * @property-read User|null $createur
 * @property-read \App\Models\EtablissementExercice|null $etablissement
 * @property-read mixed $dossier_and_timestamp
 * @property-read LigneDeTemps|null $ligne_temps
 * @property-read \App\Models\Motif $motif
 * @property-read \App\Models\Patient $patient
 * @property-read User $updatedBy
 * @method static \Illuminate\Database\Eloquent\Builder|ActivitesControle findSimilarSlugs($attribute, $config, $slug)
 * @method static \Illuminate\Database\Eloquent\Builder|ActivitesControle newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|ActivitesControle newQuery()
 * @method static \Illuminate\Database\Query\Builder|ActivitesControle onlyTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|ActivitesControle query()
 * @method static \Illuminate\Database\Eloquent\Builder|ActivitesControle whereActiviteId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|ActivitesControle whereAffiliationId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|ActivitesControle whereCommentaire($value)
 * @method static \Illuminate\Database\Eloquent\Builder|ActivitesControle whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|ActivitesControle whereCreator($value)
 * @method static \Illuminate\Database\Eloquent\Builder|ActivitesControle whereDateCloture($value)
 * @method static \Illuminate\Database\Eloquent\Builder|ActivitesControle whereDeletedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|ActivitesControle whereEtablissementId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|ActivitesControle whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|ActivitesControle whereLigneTempsId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|ActivitesControle wherePatientId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|ActivitesControle whereSlug($value)
 * @method static \Illuminate\Database\Eloquent\Builder|ActivitesControle whereStatut($value)
 * @method static \Illuminate\Database\Eloquent\Builder|ActivitesControle whereUpdatedAt($value)
 * @method static \Illuminate\Database\Query\Builder|ActivitesControle withTrashed()
 * @method static \Illuminate\Database\Query\Builder|ActivitesControle withoutTrashed()
 * @mixin \Eloquent
 */
class ActivitesControle extends Model
{
    use Sluggable;
    use SoftDeletes;

    protected $table = 'activites_controle';
    protected $fillable = [
        "activite_id",
        "patient_id",
        'etablissement_id',
        'affiliation_id',
        'ligne_temps_id',
        "creator",
        "commentaire",
        "statut",
        "date_cloture",
        "slug",
    ];

    public function sluggable()
    {
        return [
            'slug' => [
                'source' => 'DossierAndTimestamp'
            ]
        ];
    }

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        ActivitesControle::creating(function ($med){
            $med->creator = Auth::id();
        });

    }

    public function getDossierAndTimestampAttribute() {
        return Str::random(10) . ' ' .Carbon::now()->timestamp;
    }

    public function activitesMedecinReferent(){
        return $this->belongsTo(ActivitesMedecinReferent::class,'activite_id','id');
    }

    public function createur(){
        return $this->belongsTo(User::class,'creator','id');
    }

    public function patient(){
        return $this->belongsTo(Patient::class,'patient_id','user_id');
    }

    public function updatedBy(){
        return $this->belongsTo(User::class,'updated_by','id');
    }

    public function ligne_temps(){
        return $this->belongsTo(LigneDeTemps::class);
    }

    public function affiliation(){
        return $this->belongsTo(Affiliation::class);
    }

    public function motif(){
        return $this->belongsTo(Motif::class);
    }
    public function etablissement(){
        return $this->belongsTo(EtablissementExercice::class, 'etablissement_id');
    }

    public function scopeActiviteMedControleMoisAnnee($query, $intervalle_debut, $intervalle_fin)
    {
        return $query->where(function ($query) use($intervalle_debut, $intervalle_fin) {
            $query->whereDate('created_at', '>=', $intervalle_debut)->whereDate('created_at', '<=', $intervalle_fin);
        })->orderBy('created_at', 'asc');
    }

}
