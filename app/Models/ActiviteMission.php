<?php

namespace App\Models;

use App\User;
use Carbon\Carbon;
use Cviebrock\EloquentSluggable\Sluggable;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Str;

/**
 * App\Models\ActiviteMission
 *
 * @property int $id
 * @property int|null $activite_id
 * @property int|null $dossier_medical_id
 * @property int|null $creator
 * @property int|null $description
 * @property string|null $commentaire
 * @property string|null $nom_partenaire
 * @property string|null $nom_activite
 * @property string|null $slug
 * @property string|null $statut
 * @property string|null $date_cloture
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property \Illuminate\Support\Carbon|null $deleted_at
 * @property-read \App\Models\ActivitesAma $activite
 * @property-read User|null $createur
 * @property-read \App\Models\DossierMedical|null $dossier
 * @property-read mixed $dossier_and_timestamp
 * @method static \Illuminate\Database\Eloquent\Builder|ActiviteMission findSimilarSlugs($attribute, $config, $slug)
 * @method static \Illuminate\Database\Eloquent\Builder|ActiviteMission newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|ActiviteMission newQuery()
 * @method static \Illuminate\Database\Query\Builder|ActiviteMission onlyTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|ActiviteMission query()
 * @method static \Illuminate\Database\Eloquent\Builder|ActiviteMission whereActiviteId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|ActiviteMission whereCommentaire($value)
 * @method static \Illuminate\Database\Eloquent\Builder|ActiviteMission whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|ActiviteMission whereCreator($value)
 * @method static \Illuminate\Database\Eloquent\Builder|ActiviteMission whereDateCloture($value)
 * @method static \Illuminate\Database\Eloquent\Builder|ActiviteMission whereDeletedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|ActiviteMission whereDescription($value)
 * @method static \Illuminate\Database\Eloquent\Builder|ActiviteMission whereDossierMedicalId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|ActiviteMission whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|ActiviteMission whereNomActivite($value)
 * @method static \Illuminate\Database\Eloquent\Builder|ActiviteMission whereNomPartenaire($value)
 * @method static \Illuminate\Database\Eloquent\Builder|ActiviteMission whereSlug($value)
 * @method static \Illuminate\Database\Eloquent\Builder|ActiviteMission whereStatut($value)
 * @method static \Illuminate\Database\Eloquent\Builder|ActiviteMission whereUpdatedAt($value)
 * @method static \Illuminate\Database\Query\Builder|ActiviteMission withTrashed()
 * @method static \Illuminate\Database\Query\Builder|ActiviteMission withoutTrashed()
 * @mixin \Eloquent
 */
class ActiviteMission extends Model
{

    use Sluggable;
    use SoftDeletes;

    // protected $fillable = [
    //     'activite_id',
    //     'dossier_medical_id',
    //     'creator',
    //     'commentaire',
    //     'description',
    //     'nom_partenaire',
    //     'nom_activite',
    //     'statut',
    //     'date_cloture',
    //     'slug',
    // ];

    protected $fillable = [
        'etablissement_id',
        'activite_id',
        'activite_ama_id',
        'creator',
        'commentaire',
        'statut',
        'date_cloture',
        'slug',
    ];

    /**
     * Return the sluggable configuration array for this model.
     *
     * @return array
     */
    public function sluggable()
    {
        return [
            'slug' => [
                'source' => 'DossierAndTimestamp'
            ]
        ];
    }

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        ActiviteMission::creating(function ($activite){
            $activite->creator = Auth::id();
        });

    }

    public function getDossierAndTimestampAttribute() {
        return Str::random(10) . ' ' .Carbon::now()->timestamp;
    }

    public function activite(){
        return $this->belongsTo(ActivitesAma::class,'activite_ama_id','id');
    }

    public function createur(){
        return $this->belongsTo(User::class,'creator','id');
    }

    public function dossier(){
        return $this->belongsTo(DossierMedical::class,'dossier_medical_id','id');
    }
}
